# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
orbs: 
  aws-ecr: circleci/aws-ecr@7.3.0
jobs:
  plan-apply:
    working_directory: /go/src/github.com/servian/TechChallengeApp
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: terraform init & plan

          command: |            
            cd infrastructure
            cat << EOF > variables.tfvars
            AWS_REGION       = "ap-southeast-2"
            TF_DBUSER       = "${TF_DBUSER}"
            TF_DBPASSWORD    = "${TF_DBPASSWORD}"
            TF_DBSUBNETGROUP = "dbsubnetgroup"
            tag_prefix = "techchallenge"
            EOF
            if [[ -f variables.tfvars ]]
            then
              echo "file is present"
            else
              echo "tfvar file missing!!!"
              exit 1;
            fi
            cat variables.tfvars
            terraform init -input=false
            terraform plan -out tfapply -var-file variables.tfvars   

      - persist_to_workspace:
          root: .
          paths:
            - .            
  apply:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
         at: .
      - run:
          name: terraform
          command: |            
            rm conf.toml 
            cd infrastructure
            terraform init -input=false
            terraform plan -out tfapply -var-file variables.tfvars
            terraform apply -auto-approve tfapply
            cd ..
            cp ./infrastructure/conf.toml .  
            cp ./infrastructure/ecr_repourl.conf . 

      - persist_to_workspace:
          root: .
          paths:
            - .
  build:
    docker:
      - image: circleci/golang:latest

    steps:
      - attach_workspace:
         at: .

      # build and test
      - run: go get -v -t -d ./...
      - run: go build -v
      - run: go test -v -race -cover ./...
      
  build-image:
    docker:
      - image: docker:17.05.0-ce-git

    steps:

      - setup_remote_docker:
          version:  19.03.13

      - attach_workspace:
         at: .

      - run:
          name: Install dependencies
          command: |
              apk add --no-cache \
              py-pip=9.0.0-r1
              pip install \
              docker-compose==1.12.0 \
              awscli==1.11.6

      - run:
          name: build docker image
          command: docker build -t techchallenge:1.0.0 .                
      - run:
          name: Deploy to ECR
          command: |
           export AWS_RepoURL=$(cat ecr_repourl.conf)
           eval $(aws ecr get-login --region ap-southeast-2 )
           docker tag techchallenge:1.0.0  "${AWS_RepoURL}:latest"
           docker push "${AWS_RepoURL}:latest"
      - persist_to_workspace:
          root: .
          paths:
            - .

  deploy:
    working_directory: /go/src/github.com/servian/TechChallengeApp

    docker:
      - image: circleci/golang:latest

    steps:
      - checkout
      - run:
          name: Setup
          command: |

            go get -v -t -d ./...
            go get github.com/GeertJohan/go.rice/rice
            mkdir output
            go build -ldflags="-s -w" -a -v -o TechChallengeApp .
            ls
            ./TechChallengeApp --version | sed -e 's/TechChallengeApp version /v./' > versionfile

      - run: 
          name: Build for linux
          environment:
            GOOS: linux
            GOARCH: amd64
          command: |
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -ldflags="-s -w" -a -v -o TechChallengeApp .

            pushd ui
            rice append --exec ../TechChallengeApp
            popd
            
            cp TechChallengeApp dist/
            cp conf.toml dist/
            
            rm TechChallengeApp

            export version=$(cat versionfile)
            
            zip -r "output/TechChallengeApp_${version}_linux64.zip" dist/*

      # build for macos
      - run: 
          name: Build for macOS
          environment:
            GOOS: darwin
            GOARCH: amd64
          command: |
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -ldflags="-s -w" -a -v -o TechChallengeApp .

            pushd ui
            rice append --exec ../TechChallengeApp
            popd

            cp TechChallengeApp dist/
            cp conf.toml dist/

            rm TechChallengeApp

            export version=$(cat versionfile)

            zip -r "output/TechChallengeApp_${version}_darwin.zip" dist/*

      # build windows 64 bit
      - run: 
          name: Build Windows 64bit
          environment:
            GOOS: windows
            GOARCH: amd64
          command: | 
            # cross compile to windows in linux requires a few extra bits
            # this gets around permission issues
            sudo chmod -R 0777 /usr/local/go/
            go get github.com/inconshreveable/mousetrap
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -ldflags="-s -w" -a -v -o TechChallengeApp.exe .

            pushd ui
            rice append --exec ../TechChallengeApp.exe
            popd

            cp TechChallengeApp.exe dist/
            cp conf.toml dist/

            rm TechChallengeApp.exe

            export version=$(cat versionfile)

            zip -r "output/TechChallengeApp_${version}_win64.zip" dist/*

      #build windows 32 bit
      - run: 
          name: Build Windows 32bit
          environment:
            GOOS: windows
            GOARCH: 386
          command: |
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -ldflags="-s -w" -a -v -o TechChallengeApp.exe .

            pushd ui
            rice append --exec ../TechChallengeApp.exe
            popd

            cp TechChallengeApp.exe dist/
            cp conf.toml dist/

            rm TechChallengeApp.exe

            export version=$(cat versionfile)

            zip -r "output/TechChallengeApp_${version}_win32.zip" dist/*

      - run:
          name: Release if new version
          command: |
            export version=$(cat versionfile)
            echo $version
            export tagvalue=$(git tag | grep ${version})
            export prerelease=$(echo ${version} | grep 'pre-release')
            if [ -z "${tagvalue}" ]; then
              go get github.com/tcnksm/ghr

              if [ -z "${prerelease}" ]; then
                echo "No pre-release in version, creating release"
                ghr -u servian ${version} output
              else
                echo "Found pre-release in version, creating pre-release"
                ghr -u servian -prerelease ${version} output
              fi
            fi

      - store_artifacts:
          path: output
          
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - plan-apply 
      - hold-apply:
          type: approval
          requires:
            - plan-apply
      - apply:
          requires:
            - hold-apply     
      - build:
          requires: 
            - apply
      - build-image:
          requires: 
            - apply
      - deploy:
          requires: 
            - build
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
