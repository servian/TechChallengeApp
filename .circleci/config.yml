# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1


orbs:
  aws-ecr: circleci/aws-ecr@7.3.0
  aws-cli: circleci/aws-cli@2.1.0
  aws-ecs: circleci/aws-ecs@2.2.1

jobs:
  build:
    working_directory: /go/src/github.com/servian/TechChallengeApp
    docker:
      - image: circleci/golang:latest
   
    steps:
      - checkout
      
      - run: 
          name: build and test
          command: |                    
            go get -v -t -d ./...
            go build -v
            go test -v -race -cover ./...
            
  

  deploy:
    working_directory: /go/src/github.com/servian/TechChallengeApp
    docker:
      - image: circleci/golang:latest

    steps:
      - checkout

      - run:
          name: Setup
          command: |      
            echo "--deploy stage before download--"
            ls -al conf.toml
            cat conf.toml
            # echo "--installing awscli--"
            # sudo apt-get install pip -y
            # pip install awscli
            # aws s3 cp s3://serviantechchallenge/conf.toml .
            # # pwd  
            # echo ${DbPassword}         
            sed -i -e "s/pwd/$(echo ${DbPassword})/" conf.toml
            sed -i -e "s/dbhost/$(echo ${DbHost})/" conf.toml
            echo "--after sed---"
            
            ls -al conf.toml
            cat conf.toml

            go get -v -t -d ./...
            go get github.com/GeertJohan/go.rice/rice
            mkdir output
            go build -ldflags="-s -w" -a -v -o TechChallengeApp .
            ls
            ./TechChallengeApp --version | sed -e 's/TechChallengeApp version /v./' > versionfile


      - run: 
          name: Build for linux
          environment:
            GOOS: linux
            GOARCH: amd64
          command: |   
            echo "--build stage--"
            ls -al conf.toml
            cat conf.toml
            
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -ldflags="-s -w" -a -v -o TechChallengeApp .

            pushd ui
            rice append --exec ../TechChallengeApp
            popd

            cp TechChallengeApp dist/
            cp conf.toml dist/
            
            cat dist/conf.toml

            rm TechChallengeApp

            export version=$(cat versionfile)
            
            zip -r "output/TechChallengeApp_${version}_linux64.zip" dist/*
            echo ${version}
           

      # build for macos
      - run: 
          name: Build for macOS
          environment:
            GOOS: darwin
            GOARCH: amd64
          command: |
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -ldflags="-s -w" -a -v -o TechChallengeApp .

            pushd ui
            rice append --exec ../TechChallengeApp
            popd

            cp TechChallengeApp dist/
            cp conf.toml dist/

            rm TechChallengeApp

            export version=$(cat versionfile)

            zip -r "output/TechChallengeApp_${version}_darwin.zip" dist/*

      # build windows 64 bit
      - run: 
          name: Build Windows 64bit
          environment:
            GOOS: windows
            GOARCH: amd64
          command: | 
            # cross compile to windows in linux requires a few extra bits
            # this gets around permission issues
            sudo chmod -R 0777 /usr/local/go/
            go get github.com/inconshreveable/mousetrap
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -ldflags="-s -w" -a -v -o TechChallengeApp.exe .

            pushd ui
            rice append --exec ../TechChallengeApp.exe
            popd

            cp TechChallengeApp.exe dist/

          

            cp conf.toml dist/

            rm TechChallengeApp.exe

            export version=$(cat versionfile)

            zip -r "output/TechChallengeApp_${version}_win64.zip" dist/*

      #build windows 32 bit
      - run: 
          name: Build Windows 32bit
          environment:
            GOOS: windows
            GOARCH: 386
          command: |
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -ldflags="-s -w" -a -v -o TechChallengeApp.exe .

            pushd ui
            rice append --exec ../TechChallengeApp.exe
            popd

            cp TechChallengeApp.exe dist/
            cp conf.toml dist/

            rm TechChallengeApp.exe

            export version=$(cat versionfile)

            zip -r "output/TechChallengeApp_${version}_win32.zip" dist/*

      - run:
          name: Release if new version
          command: |
            export GITHUB_API=https://api.github.com/repos/servian/TechChallengeApp/releases
            export version=$(cat versionfile)
            echo $version
            export tagvalue=$(git tag | grep ${version})
            export prerelease=$(echo ${version} | grep 'pre-release')
            if [ -z "${tagvalue}" ]; then
              go get -d github.com/tcnksm/ghr

              if [ -z "${prerelease}" ]; then
                echo "No pre-release in version, creating release"
                ghr -u servian ${version} output
              else
                echo "Found pre-release in version, creating pre-release"
                ghr -u servian -prerelease ${version} output
              fi
            fi

      - store_artifacts:
          path: output
          
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
          context: 
            - john-context
      - deploy:
          requires: 
            - build
          filters:
            branches:
              only: john-0309
            tags:
              ignore: /.*/
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          #aws-access-key-id: ACCESS_KEY_ID_ENV_VAR_NAME
          #aws-secret-access-key: SECRET_ACCESS_KEY_ENV_VAR_NAME
          context: john-context
          create-repo: true
          dockerfile: Dockerfile
          no-output-timeout: 20m
          path: .
          #profile-name: myProfileName
          region: AWS_REGION
          repo: stc
          skip-when-tags-exist: false
          tag: 'latest,v0.9.0.${CIRCLE_BUILD_NUM}'
          requires:
            - deploy
      - aws-ecs/deploy-service-update:
          cluster-name: '${MY_ECS_CLUSTER}'
          #container-image-name-updates: 'container=${MY_TASK_DEF},tag=latest,v0.9.0.${CIRCLE_BUILD_NUM}'
          family: '${MY_TASK_DEF}'
          service-name: '${MY_ECS_SERVICE}'
          requires:
            - aws-ecr/build-and-push-image
    
