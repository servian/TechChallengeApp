# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2.1


orbs:
  aws-ecr: circleci/aws-ecr@7.3.0

jobs:
  build:
    working_directory: /go/src/github.com/servian/TechChallengeApp
    docker:
      - image: circleci/golang:latest

    steps:
      - checkout
      - run: pwd
      - run: ls
      # build and test
      - run: go get -v -t -d ./...
      - run: go build -v
      - run: go test -v -race -cover ./...
      - run: pwd
      - run: ls
    #  - run: service docker start  && docker ps

  #ecr-push:






# #####john test config.yml on my terminal
#   testA:
#     machine:
#       image: ubuntu-2004:current

#     steps: 
#       #- checkout 
#       - run: 
#           name: install awscli
#           command: |
#             uname -a 
#             pwd
#             sudo apt-get update -y
#             pip install --upgrade pip
#             #sudo apt-get install python3-pip -y
#             pip install awscli --upgrade
#             aws s3 ls
#             ls
#             echo "this is ubuntu"
     
#   test: 
#     #working_directory: .
#     docker:
#       - image: circleci/golang:latest
#     steps:
#       - checkout
#       - run: sudo apt-get install pip -y
#       - run: pip install awscli
#       - run: echo "${TEST_VALUE}"
#       - run: echo ${CONTEXT_VAR}
#       - run: pwd
#       - run: ls
#       - run: aws s3 ls
# ###########################################################################

  deploy:
    working_directory: /go/src/github.com/servian/TechChallengeApp
    docker:
      - image: circleci/golang:latest

    steps:
      - checkout

      - run:
          name: Setup
          command: |
            go get -v -t -d ./...
            go get github.com/GeertJohan/go.rice/rice
            mkdir output
            go build -ldflags="-s -w" -a -v -o TechChallengeApp .
            ls
            ./TechChallengeApp --version | sed -e 's/TechChallengeApp version /v./' > versionfile


      - run: 
          name: Build for linux
          environment:
            GOOS: linux
            GOARCH: amd64
          command: |
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -ldflags="-s -w" -a -v -o TechChallengeApp .

            pushd ui
            rice append --exec ../TechChallengeApp
            popd

            cp TechChallengeApp dist/
            cp conf.toml dist/
            
            rm TechChallengeApp

            export version=$(cat versionfile)
            
            zip -r "output/TechChallengeApp_${version}_linux64.zip" dist/*

           

      # build for macos
      - run: 
          name: Build for macOS
          environment:
            GOOS: darwin
            GOARCH: amd64
          command: |
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -ldflags="-s -w" -a -v -o TechChallengeApp .

            pushd ui
            rice append --exec ../TechChallengeApp
            popd

            cp TechChallengeApp dist/
            cp conf.toml dist/

            rm TechChallengeApp

            export version=$(cat versionfile)

            zip -r "output/TechChallengeApp_${version}_darwin.zip" dist/*

      # build windows 64 bit
      - run: 
          name: Build Windows 64bit
          environment:
            GOOS: windows
            GOARCH: amd64
          command: | 
            # cross compile to windows in linux requires a few extra bits
            # this gets around permission issues
            sudo chmod -R 0777 /usr/local/go/
            go get github.com/inconshreveable/mousetrap
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -ldflags="-s -w" -a -v -o TechChallengeApp.exe .

            pushd ui
            rice append --exec ../TechChallengeApp.exe
            popd

            cp TechChallengeApp.exe dist/
            cp conf.toml dist/

            rm TechChallengeApp.exe

            export version=$(cat versionfile)

            zip -r "output/TechChallengeApp_${version}_win64.zip" dist/*

      #build windows 32 bit
      - run: 
          name: Build Windows 32bit
          environment:
            GOOS: windows
            GOARCH: 386
          command: |
            if [ -d "dist" ]; then
              rm -rf dist
            fi
            
            mkdir -p dist
            
            go build -ldflags="-s -w" -a -v -o TechChallengeApp.exe .

            pushd ui
            rice append --exec ../TechChallengeApp.exe
            popd

            cp TechChallengeApp.exe dist/
            cp conf.toml dist/

            rm TechChallengeApp.exe

            export version=$(cat versionfile)

            zip -r "output/TechChallengeApp_${version}_win32.zip" dist/*

      - run:
          name: Release if new version
          command: |
            export version=$(cat versionfile)
            echo $version
            export tagvalue=$(git tag | grep ${version})
            export prerelease=$(echo ${version} | grep 'pre-release')
            if [ -z "${tagvalue}" ]; then
              go get github.com/tcnksm/ghr

              if [ -z "${prerelease}" ]; then
                echo "No pre-release in version, creating release"
                ghr -u servian ${version} output
              else
                echo "Found pre-release in version, creating pre-release"
                ghr -u servian -prerelease ${version} output
              fi
            fi

      - store_artifacts:
          path: output
          
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      # - testA
      # - test  
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL_ENV_VAR_NAME
          aws-access-key-id: ACCESS_KEY_ID_ENV_VAR_NAME
          aws-secret-access-key: SECRET_ACCESS_KEY_ENV_VAR_NAME
          context: myContext
          create-repo: true
          dockerfile: myDockerfile
          no-output-timeout: 20m
          path: pathToMyDockerfile
          profile-name: myProfileName
          region: AWS_REGION_ENV_VAR_NAME
          repo: myECRRepository
          skip-when-tags-exist: false
          tag: 'latest,myECRRepoTag'

      - deploy:
          requires: 
            - build
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
